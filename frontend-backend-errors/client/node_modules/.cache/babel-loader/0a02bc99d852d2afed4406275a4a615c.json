{"ast":null,"code":"import _classCallCheck from \"/Users/pakchu/Desktop/React-Term-3/react/frontend-backend/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/pakchu/Desktop/React-Term-3/react/frontend-backend/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/pakchu/Desktop/React-Term-3/react/frontend-backend/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/pakchu/Desktop/React-Term-3/react/frontend-backend/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/pakchu/Desktop/React-Term-3/react/frontend-backend/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/pakchu/Desktop/React-Term-3/react/frontend-backend/client/src/Components/TaskList.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport jwt_decode from 'jwt-decode';\n\nvar TaskList =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(TaskList, _Component);\n\n  function TaskList(props) {\n    var _this;\n\n    _classCallCheck(this, TaskList);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TaskList).call(this, props));\n\n    _this.handleEdit = function (id) {\n      _this.setState(function (prevState) {\n        return {\n          toggle: !prevState.toggle,\n          updateEdit: !prevState.updateEdit\n        };\n      }, function () {\n        if (!_this.state.toggle) {\n          _this.handleServerEdit(id);\n        }\n      });\n    };\n\n    _this.handleServerEdit = function (id) {\n      var token = localStorage.getItem('jwtToken');\n      var decoded = jwt_decode(token);\n      var newObj = {\n        id: id,\n        newTodo: _this.state.currentState\n      };\n      axios.put(\"http://localhost:3001/todo/edittodo/\".concat(decoded.id, \"&_method=PUT\"), newObj).then(function (result) {\n        console.log(result);\n      }).catch(function (error) {\n        console.log(error);\n      });\n    };\n\n    _this.handleUpdateEdit = function (id) {\n      _this.setState({\n        currentState: _this.refs.updatedText.value\n      }, function () {\n        _this.setState({\n          updateEdit: true\n        });\n\n        _this.props.handleUpdateEdit(id, _this.state.currentState);\n      });\n    };\n\n    _this.handleDelete = function (id) {\n      _this.props.handleDelete(id);\n    };\n\n    _this.handleChecked = function (id) {\n      _this.props.handleChecked(id);\n    };\n\n    _this.noEdit = function () {\n      _this.setState(function (prevState) {\n        return {\n          toggle: !prevState.toggle,\n          updateEdit: !prevState.updateEdit\n        };\n      });\n    };\n\n    _this.state = {\n      toggle: false,\n      currentState: '',\n      updateEdit: false\n    };\n    return _this;\n  }\n\n  _createClass(TaskList, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.setState({\n        currentState: this.props.task.todo\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"li\", {\n        className: \"list-group-item \".concat(this.props.checked ? \"list-group-item-danger completed\" : \"\"),\n        key: this.props.task._id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"button\",\n        className: \"float-right btn btn-danger  btn-sm\",\n        value: \"delete\",\n        style: {\n          textAlign: 'center',\n          marginLeft: 5\n        },\n        onClick: this.handleDelete.bind(this, this.props.task._id),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }), !!this.state.updateEdit ? React.createElement(\"input\", {\n        type: \"button\",\n        className: \"float-right btn btn-info  btn-sm\",\n        value: \"No Edit\",\n        style: {\n          textAlign: 'center'\n        },\n        onClick: this.noEdit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }) : '', React.createElement(\"input\", {\n        type: \"button\",\n        disabled: this.state.updateEdit,\n        className: \"float-right btn btn-info  btn-sm\",\n        value: \"edit\",\n        style: {\n          textAlign: 'center',\n          marginRight: 5\n        },\n        onClick: this.handleEdit.bind(this, this.props.task._id),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        type: \"checkbox\",\n        style: {\n          margin: \"7px 5px\"\n        },\n        className: \"float-right\",\n        checked: this.props.checked,\n        onChange: this.handleChecked.bind(this, this.props.task._id),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }), this.state.toggle ? React.createElement(\"input\", {\n        value: this.state.currentState,\n        type: \"text\",\n        ref: \"updatedText\",\n        onChange: this.handleUpdateEdit.bind(this, this.props.task._id),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }) : this.props.task.todo);\n    }\n  }]);\n\n  return TaskList;\n}(Component);\n/*\n\nimport React, { Component } from 'react'\n\nexport default class TaskList extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      toggle: false\n    }\n\n  }\n\n  handleEdit = (id) => {\n    this.setState({\n      toggle: !this.state.toggle\n    })\n  }\n\n  handleDelete = (id) => {\n\n  }\n  \n  handleChecked = (id) => {\n   this.props.handleChecked(id)\n  }\n\n  render() {\n\n    let task = [];\n\n    if (this.state.toggle) {\n      task = (\n        <li className={`list-group-item ${(this.props.checked) ? \"list-group-item-danger completed\" : \"\"}`} key={this.props.task.id} >\n          <input type=\"button\" className=\"float-right btn btn-danger  btn-sm\" value=\"delete\" style={{textAlign: 'center', marginLeft: 5}} onClick={this.handleDelete.bind(this, this.props.task.id)} />\n          <input type=\"button\" className=\"float-right btn btn-info  btn-sm\" value=\"edit\" style={{textAlign: 'center'}} onClick={this.handleEdit.bind(this, this.props.task.id)} />\n          <input type=\"checkbox\" style={{margin: \"7px 5px\"}} className=\"float-right\" checked={this.props.checked} onChange={this.handleChecked.bind(this, this.props.task.id)} />\n        {this.props.task.todo}\n       </li>\n      )\n    } else {\n      task = (\n        <li className={`list-group-item ${(this.props.checked) ? \"list-group-item-danger completed\" : \"\"}`} key={this.props.task.id} >\n          <input type=\"button\" className=\"float-right btn btn-danger  btn-sm\" value=\"delete\" style={{textAlign: 'center', marginLeft: 5}} onClick={this.handleDelete.bind(this, this.props.task.id)} />\n          <input type=\"button\" className=\"float-right btn btn-info  btn-sm\" value=\"edit\" style={{textAlign: 'center'}} onClick={this.handleEdit.bind(this, this.props.task.id)} />\n          <input type=\"checkbox\" style={{margin: \"7px 5px\"}} className=\"float-right\" checked={this.props.checked} onChange={this.handleChecked.bind(this, this.props.task.id)} />\n          {this.props.task.todo}\n      </li>\n      )\n    }\n\n    return (\n     {task}\n    )\n  }\n}\n\n\n*/\n\n\nexport { TaskList as default };","map":{"version":3,"sources":["/Users/pakchu/Desktop/React-Term-3/react/frontend-backend/client/src/Components/TaskList.js"],"names":["React","Component","axios","jwt_decode","TaskList","props","handleEdit","id","setState","prevState","toggle","updateEdit","state","handleServerEdit","token","localStorage","getItem","decoded","newObj","newTodo","currentState","put","then","result","console","log","catch","error","handleUpdateEdit","refs","updatedText","value","handleDelete","handleChecked","noEdit","task","todo","checked","_id","textAlign","marginLeft","bind","marginRight","margin"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport axios from 'axios';\nimport jwt_decode from 'jwt-decode';\n\nexport default class TaskList extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      toggle: false,\n      currentState: '',\n      updateEdit: false\n    }\n  }\n\n  componentDidMount() {\n    this.setState({\n      currentState: this.props.task.todo\n    })\n  }\n\n \n  handleEdit = (id) => {\n    this.setState(prevState => ({\n      toggle: !prevState.toggle,\n      updateEdit: !prevState.updateEdit\n    }), () => {\n      if (!this.state.toggle) {\n        this.handleServerEdit(id)\n      }\n    }) \n  }\n \n\n  handleServerEdit = (id) => {\n\n    var token = localStorage.getItem('jwtToken');\n    const decoded = jwt_decode(token);\n\n    let newObj = {\n      id,\n      newTodo: this.state.currentState\n    }\n\n    axios.put(`http://localhost:3001/todo/edittodo/${decoded.id}&_method=PUT`, newObj)\n    .then(result => {\n      console.log(result)\n    })\n    .catch(error => {\n      console.log(error)\n    })\n\n  }\n\n  handleUpdateEdit = (id) => {\n\n    this.setState({\n      currentState: this.refs.updatedText.value\n    }, () => {\n      \n      this.setState({\n        updateEdit: true\n      })\n\n      this.props.handleUpdateEdit(id, this.state.currentState)\n    })\n  }\n\n  handleDelete = (id) => {\n   this.props.handleDelete(id)\n  }\n  \n  handleChecked = (id) => {\n   this.props.handleChecked(id)\n  }\n\n  noEdit = () => {\n    this.setState(prevState => ({\n      toggle: !prevState.toggle,\n      updateEdit: !prevState.updateEdit\n    })) \n  }\n\n  render() {\n    return (\n      <li className={`list-group-item ${(this.props.checked) ? \"list-group-item-danger completed\" : \"\"}`} key={this.props.task._id} >\n        <input type=\"button\" className=\"float-right btn btn-danger  btn-sm\" value=\"delete\" style={{textAlign: 'center', marginLeft: 5}} onClick={this.handleDelete.bind(this, this.props.task._id)} />\n        { !!this.state.updateEdit ? <input type='button' className=\"float-right btn btn-info  btn-sm\" value=\"No Edit\" style={{textAlign: 'center'}} onClick={this.noEdit} /> : ''}\n        <input type=\"button\" disabled={this.state.updateEdit} className=\"float-right btn btn-info  btn-sm\" value=\"edit\" style={{textAlign: 'center', marginRight: 5}} onClick={this.handleEdit.bind(this, this.props.task._id)} />\n        <input type=\"checkbox\" style={{margin: \"7px 5px\"}} className=\"float-right\" checked={this.props.checked} onChange={this.handleChecked.bind(this, this.props.task._id)} />\n        \n        {this.state.toggle ? <input value={this.state.currentState} \n                                    type=\"text\" \n                                    ref=\"updatedText\"\n                                    onChange={this.handleUpdateEdit.bind(this, this.props.task._id)} /> : this.props.task.todo}\n     \n    </li>\n\n    )\n  }\n}\n\n\n/*\n\nimport React, { Component } from 'react'\n\nexport default class TaskList extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      toggle: false\n    }\n\n  }\n\n  handleEdit = (id) => {\n    this.setState({\n      toggle: !this.state.toggle\n    })\n  }\n\n  handleDelete = (id) => {\n\n  }\n  \n  handleChecked = (id) => {\n   this.props.handleChecked(id)\n  }\n\n  render() {\n\n    let task = [];\n\n    if (this.state.toggle) {\n      task = (\n        <li className={`list-group-item ${(this.props.checked) ? \"list-group-item-danger completed\" : \"\"}`} key={this.props.task.id} >\n          <input type=\"button\" className=\"float-right btn btn-danger  btn-sm\" value=\"delete\" style={{textAlign: 'center', marginLeft: 5}} onClick={this.handleDelete.bind(this, this.props.task.id)} />\n          <input type=\"button\" className=\"float-right btn btn-info  btn-sm\" value=\"edit\" style={{textAlign: 'center'}} onClick={this.handleEdit.bind(this, this.props.task.id)} />\n          <input type=\"checkbox\" style={{margin: \"7px 5px\"}} className=\"float-right\" checked={this.props.checked} onChange={this.handleChecked.bind(this, this.props.task.id)} />\n        {this.props.task.todo}\n       </li>\n      )\n    } else {\n      task = (\n        <li className={`list-group-item ${(this.props.checked) ? \"list-group-item-danger completed\" : \"\"}`} key={this.props.task.id} >\n          <input type=\"button\" className=\"float-right btn btn-danger  btn-sm\" value=\"delete\" style={{textAlign: 'center', marginLeft: 5}} onClick={this.handleDelete.bind(this, this.props.task.id)} />\n          <input type=\"button\" className=\"float-right btn btn-info  btn-sm\" value=\"edit\" style={{textAlign: 'center'}} onClick={this.handleEdit.bind(this, this.props.task.id)} />\n          <input type=\"checkbox\" style={{margin: \"7px 5px\"}} className=\"float-right\" checked={this.props.checked} onChange={this.handleChecked.bind(this, this.props.task.id)} />\n          {this.props.task.todo}\n      </li>\n      )\n    }\n\n    return (\n     {task}\n    )\n  }\n}\n\n\n*/"]},"metadata":{},"sourceType":"module"}